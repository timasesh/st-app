// –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã
class WheelOfFortune {
    constructor() {
        this.wheel = document.getElementById('wheel');
        this.spinBtn = document.getElementById('spinBtn');
        this.result = document.getElementById('result');
        this.prizeDisplay = document.getElementById('prizeDisplay');
        this.particles = document.getElementById('particles');
        this.userStars = document.getElementById('userStars');
        this.spinStatus = document.getElementById('spinStatus');
        
        this.isSpinning = false;
        this.currentRotation = 0; // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä—ã —Å —Ç–æ—á–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏)
        this.sectors = [
            { center: 0, range: [-25.7, 25.7], prize: "1‚≠ê" },      // 1 –∑–≤–µ–∑–¥–∞
            { center: 51.43, range: [25.7, 77.1], prize: "4‚≠ê" },   // 4 –∑–≤–µ–∑–¥—ã
            { center: 102.86, range: [77.1, 128.6], prize: "0‚≠ê" }, // –ø—É—Å—Ç–æ
            { center: 154.29, range: [128.6, 180.0], prize: "3‚≠ê" }, // 3 –∑–≤–µ–∑–¥—ã
            { center: 205.71, range: [180.0, 231.4], prize: "0‚≠ê" }, // –ø—É—Å—Ç–æ
            { center: 257.14, range: [231.4, 282.9], prize: "0‚≠ê" }, // –ø—É—Å—Ç–æ
            { center: 308.57, range: [282.9, 334.3], prize: "2‚≠ê" }  // 2 –∑–≤–µ–∑–¥—ã
        ];
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.createParticles();
        this.checkSpinAvailability();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    async checkSpinAvailability() {
        try {
            const response = await fetch('/api/check-wheel-status/', {
                method: 'GET',
                headers: {
                    'X-CSRFToken': this.getCookie('csrftoken'),
                    'Content-Type': 'application/json',
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.canSpin = data.can_spin;
                this.nextSpinTime = data.next_spin_time;
                this.updateSpinStatus();
                return data.can_spin;
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', data.error);
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–∏–Ω–∞:', error);
            return false;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–∏–Ω–∞
    updateSpinStatus() {
        if (!this.canSpin) {
            this.spinBtn.disabled = true;
            this.spinBtn.innerHTML = '<i class="fas fa-clock"></i><span>24—á!</span>';
            this.spinStatus.textContent = '–£–∂–µ –∫—Ä—É—Ç–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ';
            this.spinStatus.style.color = '#ff6b6b';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏–Ω–∞
            if (this.nextSpinTime) {
                const nextSpinDate = new Date(this.nextSpinTime);
                const now = new Date();
                const timeDiff = nextSpinDate - now;
                
                if (timeDiff > 0) {
                    const hours = Math.floor(timeDiff / (1000 * 60 * 60));
                    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                    this.spinStatus.textContent = `–°–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω —á–µ—Ä–µ–∑ ${hours}—á ${minutes}–º`;
                }
            }
        } else {
            this.spinBtn.disabled = false;
            this.spinBtn.innerHTML = '<i class="fas fa-play"></i><span>–ö—Ä—É—Ç–∏—Ç—å!</span>';
            this.spinStatus.textContent = '–ì–æ—Ç–æ–≤–æ –∫ –≤—Ä–∞—â–µ–Ω–∏—é';
            this.spinStatus.style.color = '#28a745';
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ –ø–æ —É–≥–ª—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    getPrizeByAngle(angle) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –¥–æ 0-360
        const normalizedAngle = ((angle % 360) + 360) % 360;
        
        for (let sector of this.sectors) {
            let [start, end] = sector.range;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç 0¬∞
            if (start < 0) {
                if (normalizedAngle >= start + 360 || normalizedAngle <= end) {
                    return sector.prize;
                }
            } else {
                if (normalizedAngle >= start && normalizedAngle <= end) {
                    return sector.prize;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω —Å–µ–∫—Ç–æ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π (1 –∑–≤–µ–∑–¥–∞)
        return "1‚≠ê";
    }
    
    bindEvents() {
        this.spinBtn.addEventListener('click', () => this.spin());
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        this.spinBtn.addEventListener('mouseenter', () => {
            this.playHoverSound();
        });
    }
    
    async spin() {
        if (this.isSpinning) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø–∏–Ω–∞
        const canSpin = await this.checkSpinAvailability();
        if (!canSpin) {
            alert('–í—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ –∫–æ–ª–µ—Å–æ –Ω–µ–¥–∞–≤–Ω–æ. –°–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.');
            return;
        }
        
        this.isSpinning = true;
        this.spinBtn.disabled = true;
        this.result.classList.remove('show');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –æ—Ç 0 –¥–æ 360
        const randomAngle = Math.random() * 360;
        
        // –ö–æ–ª–µ—Å–æ –¥–µ–ª–∞–µ—Ç 5 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
        const fullRotations = 5 * 360; // 5 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        const totalRotation = fullRotations + randomAngle;
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª = —Ç–µ–∫—É—â–∏–π + –ø–æ–ª–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã + —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
        const finalRotation = this.currentRotation + totalRotation;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —É–≥–ª—É
        const finalAngle = (finalRotation % 360);
        const selectedPrize = this.getPrizeByAngle(finalAngle);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        this.wheel.style.transition = 'transform 4s cubic-bezier(0.23, 1, 0.32, 1)';
        this.wheel.style.transform = `rotate(${finalRotation}deg)`;
        
        // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –≤—Ä–∞—â–µ–Ω–∏—è
        this.playSpinSound();
        
        // –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
        this.createSpinParticles();
        
        setTimeout(() => {
            this.isSpinning = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π —É–≥–æ–ª)
            this.currentRotation = finalRotation;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.showResult(selectedPrize);
            
            // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (selectedPrize === "0‚≠ê") {
                this.playLoseSound();
            } else {
                this.playWinSound();
                this.createWinParticles();
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä Django
            this.sendResultToServer(selectedPrize);
            
        }, 4000);
    }
    
    showResult(prize) {
        let resultText = '';
        let resultClass = '';
        
        switch (prize) {
            case "0‚≠ê":
                resultText = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ üòî';
                resultClass = 'lose';
                break;
            case "1‚≠ê":
                resultText = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É! üéâ';
                resultClass = 'win';
                break;
            case "2‚≠ê":
                resultText = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2 –∑–≤–µ–∑–¥—ã! üéâ';
                resultClass = 'win';
                break;
            case "3‚≠ê":
                resultText = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 3 –∑–≤–µ–∑–¥—ã! üéâ';
                resultClass = 'win';
                break;
            case "4‚≠ê":
                resultText = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 4 –∑–≤–µ–∑–¥—ã! üéâ';
                resultClass = 'win';
                break;
            default:
                const starCount = prize.replace('‚≠ê', '');
                resultText = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${starCount} ${this.getStarWord(parseInt(starCount))}! üéâ`;
                resultClass = 'win';
                break;
        }
        
        this.prizeDisplay.innerHTML = resultText;
        this.prizeDisplay.className = resultClass;
        this.result.classList.add('show');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –∫–Ω–æ–ø–∫–µ
        this.spinBtn.classList.add('win-animation');
        setTimeout(() => {
            this.spinBtn.classList.remove('win-animation');
        }, 500);
    }
    
    getStarWord(count) {
        if (count === 1) return '–∑–≤–µ–∑–¥—É';
        if (count >= 2 && count <= 4) return '–∑–≤–µ–∑–¥—ã';
        return '–∑–≤–µ–∑–¥';
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Django
    async sendResultToServer(prize) {
        try {
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', prize);
            
            const requestBody = {
                prize: prize,
                timestamp: Date.now()
            };
            console.log('Request body:', requestBody);
            
            const response = await fetch('/api/spin-wheel/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCookie('csrftoken')
                },
                body: JSON.stringify(requestBody)
            });
            
            const data = await response.json();
            console.log('Response from server:', data);
            
            if (data.success) {
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (this.userStars) {
                    this.userStars.textContent = data.total_stars;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–∏–Ω–∞
                await this.checkSpinAvailability();
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', data.error);
                // –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ –∫—Ä—É—Ç–∏–ª –Ω–µ–¥–∞–≤–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if (data.error && data.error.includes('—É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ –∫–æ–ª–µ—Å–æ –Ω–µ–¥–∞–≤–Ω–æ')) {
                    await this.checkSpinAvailability();
                }
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ' + data.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookies
    getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    
    createParticles() {
        setInterval(() => {
            if (!this.isSpinning) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDuration = (Math.random() * 2 + 1) + 's';
                
                this.particles.appendChild(particle);
                
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 3000);
            }
        }, 2000);
    }
    
    createSpinParticles() {
        for (let i = 0; i < 20; i++) {
            setTimeout(() => {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = '50%';
                particle.style.top = '50%';
                particle.style.transform = 'translate(-50%, -50%)';
                particle.style.animationDuration = (Math.random() * 1 + 0.5) + 's';
                
                this.particles.appendChild(particle);
                
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 1500);
            }, i * 100);
        }
    }
    
    createWinParticles() {
        for (let i = 0; i < 30; i++) {
            setTimeout(() => {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.background = '#ffd700';
                particle.style.left = '50%';
                particle.style.top = '50%';
                particle.style.transform = 'translate(-50%, -50%)';
                particle.style.animationDuration = (Math.random() * 2 + 1) + 's';
                
                this.particles.appendChild(particle);
                
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 3000);
            }, i * 50);
        }
    }
    
    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    playHoverSound() {
        this.playTone(800, 0.1, 0.1);
    }
    
    playSpinSound() {
        this.playTone(600, 0.2, 4);
    }
    
    playWinSound() {
        this.playTone(1000, 0.3, 0.5);
        setTimeout(() => this.playTone(1200, 0.2, 0.3), 200);
        setTimeout(() => this.playTone(1400, 0.1, 0.2), 400);
    }
    
    playLoseSound() {
        this.playTone(400, 0.2, 0.5);
        setTimeout(() => this.playTone(300, 0.1, 0.3), 200);
    }
    
    playTone(frequency, volume, duration) {
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
            gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration);
        } catch (e) {
            console.log('–ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã...');
    new WheelOfFortune();
});
